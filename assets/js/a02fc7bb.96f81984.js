"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[519],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return d}});var r=t(7294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,i=function(e,n){if(null==e)return{};var t,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=r.createContext({}),p=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=p(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),g=p(t),d=i,m=g["".concat(s,".").concat(d)]||g[d]||u[d]||a;return t?r.createElement(m,o(o({ref:n},l),{},{components:t})):r.createElement(m,o({ref:n},l))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var a=t.length,o=new Array(a);o[0]=g;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:i,o[1]=c;for(var p=2;p<a;p++)o[p]=t[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},650:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return c},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return l},default:function(){return g}});var r=t(7462),i=t(3366),a=(t(7294),t(3905)),o=["components"],c={},s="ENGINE",p={unversionedId:"engine",id:"engine",title:"ENGINE",description:"CLASSignite.engine.engine.Engine(process_function)",source:"@site/docs/engine.md",sourceDirName:".",slug:"/engine",permalink:"/pydocsite/docs/engine",editUrl:"https://github.com/brianjo/pydocsite/edit/main/website/docs/engine.md",tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"Guide to Writing Docs and Tutorials",permalink:"/pydocsite/docs/doc3"},next:{title:"hello",permalink:"/pydocsite/docs/hello"}},l=[{value:"<em>CLASS</em><code>ignite.engine.engine.Engine(</code><em><code>process_function</code></em><code>)</code>",id:"classigniteengineengineengineprocess_function",children:[{value:"Examples",id:"examples",children:[],level:4}],level:3}],u={toc:l};function g(e){var n=e.components,t=(0,i.Z)(e,o);return(0,a.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"engine"},"ENGINE"),(0,a.kt)("h3",{id:"classigniteengineengineengineprocess_function"},(0,a.kt)("em",{parentName:"h3"},"CLASS"),(0,a.kt)("inlineCode",{parentName:"h3"},"ignite.engine.engine.Engine("),(0,a.kt)("em",{parentName:"h3"},(0,a.kt)("inlineCode",{parentName:"em"},"process_function")),(0,a.kt)("inlineCode",{parentName:"h3"},")")),(0,a.kt)("p",null,"Runs a given ",(0,a.kt)("inlineCode",{parentName:"p"},"process_function")," over each batch of a dataset, emitting events as it goes.\nParameters"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"process_function")," (",(0,a.kt)("em",{parentName:"p"},"Callable[["),(0,a.kt)("a",{parentName:"p",href:"https://pytorch.org/ignite/generated/ignite.engine.engine.Engine.html#ignite.engine.engine.Engine"},(0,a.kt)("em",{parentName:"a"},"Engine")),(0,a.kt)("em",{parentName:"p"},", Any], Any]"),") \u2013 A function receiving a handle to the engine and the current batch in each iteration, and returns data to be stored in the engine\u2019s state."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"state"),"\nobject that is used to pass internal and user-defined state between event handlers. It is created with the engine and its attributes (e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"state.iteration"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"state.epoch")," etc) are reset on every ",(0,a.kt)("a",{parentName:"p",href:"https://pytorch.org/ignite/generated/ignite.engine.engine.Engine.html#ignite.engine.engine.Engine.run"},(0,a.kt)("inlineCode",{parentName:"a"},"run()")),"."),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"last_event_name"),"\nlast event name triggered by the engine."),(0,a.kt)("p",null,"NOTE\n",(0,a.kt)("a",{parentName:"p",href:"https://pytorch.org/ignite/generated/ignite.engine.engine.Engine.html#ignite.engine.engine.Engine"},(0,a.kt)("inlineCode",{parentName:"a"},"Engine"))," implementation has changed in v0.4.10 with \u201cinterrupt/resume\u201d feature. Engine may behave differently on certain corner cases compared to the one from v0.4.9 and before. In such case, you can set ",(0,a.kt)("inlineCode",{parentName:"p"},"Engine.interrupt_resume_enabled = False")," to restore previous behaviour."),(0,a.kt)("h4",{id:"examples"},"Examples"),(0,a.kt)("p",null,"Create a basic trainer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"\ndef update_model(engine, batch):\n    inputs, targets = batch\n    optimizer.zero_grad()\n    outputs = model(inputs)\n    loss = criterion(outputs, targets)\n    loss.backward()\n    optimizer.step()\n    return loss.item()\n\ntrainer = Engine(update_model)\n\n@trainer.on(Events.ITERATION_COMPLETED(every=100))\ndef log_training(engine):\n    batch_loss = engine.state.output\n    lr = optimizer.param_groups[0]['lr']\n    e = engine.state.epoch\n    n = engine.state.max_epochs\n    i = engine.state.iteration\n    print(f\"Epoch {e}/{n} : {i} - batch loss: {batch_loss}, lr: {lr}\")\n\ntrainer.run(data_loader, max_epochs=5)\n\n> Epoch 1/5 : 100 - batch loss: 0.10874069479016124, lr: 0.01\n> ...\n> Epoch 2/5 : 1700 - batch loss: 0.4217900575859437, lr: 0.01\n")))}g.isMDXComponent=!0}}]);